package saml;

import org.apache.commons.codec.binary.Base64;

public class BinaryDecoder {
	public static void main(String[] args) {
		String saml_token = "PHNhbWw6QXNzZXJ0aW9uIElEPSJ5cndLOWV1QUVjeG15UndjWkFhQjdfcURzWGoiIElzc3VlSW5zdGFudD0iMjAyMC0xMS0xMFQwMzowMTo1Ny40OThaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPjxzYW1sOklzc3Vlcj5jbG91ZHNzby5jaXNjby5jb208L3NhbWw6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpTaWduZWRJbmZvPjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8-PGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiLz48ZHM6UmVmZXJlbmNlIFVSST0iI3lyd0s5ZXVBRWN4bXlSd2NaQWFCN19xRHNYaiI-PGRzOlRyYW5zZm9ybXM-PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8-PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8-PGRzOkRpZ2VzdFZhbHVlPnlRZXVqeFZMbkU1dUJIRHBQNmY0YlN6WXR1YXcxVUlWam1QS1RIR2p3amM9PC9kczpEaWdlc3RWYWx1ZT48L2RzOlJlZmVyZW5jZT48L2RzOlNpZ25lZEluZm8-PGRzOlNpZ25hdHVyZVZhbHVlPmRwanVFRDlBbUNMdmdKdE5tOVh2NzNlNVNUV0Q0WExreXQ5WFZqc1ZaRDJaRktjdmtHSlpJQUtGZnkwTStJNkROZUZsYmdsNzV6Y01XN0MwWmk2UzdqQUYrOG44WWQ0VldJaDJDMlhlazVnVHBuM1g5amFHRTg3dmpGdEx0UHdaNzI1UnAvcEQvZ3M3SGhPM29KSTBRWmdkNjNkV1oreXVicytIK2JsRzAyMDRPRUdwdjRYOFFEZVFndE8vZUlkZkgxYktOWDJMVUJlbnh5WFhubVRSLzRObG93blNHVkZsalp1Tnp5UnJrNGpjWHRiTXdBa3orVURVMm10SUM5RmN6ODIvZVdIMmMzN2JYVXhkU3lQQmxrNHA3ME12UEFDa2VoN2d0VkZiMjRKbWMvS3daYnJNZlJnMTNodUpPSjNJaWoxL01vb1BWb01xVi9qZTM1ZE5FUT09PC9kczpTaWduYXR1cmVWYWx1ZT48ZHM6S2V5SW5mbz48ZHM6WDUwOURhdGE-PGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlIN1RDQ0JkV2dBd0lCQWdJVVlXVXZKUWQvVS9Tc0tuYVF0RjFSNHBpSVVud3dEUVlKS29aSWh2Y05BUUVMQlFBd1hqRUxNQWtHQTFVRUJoTUNWVk14TURBdUJnTlZCQW9USjBoNVpISmhiblJKUkNBb1FYWmhiR0Z1WTJobElFTnNiM1ZrSUVOdmNuQnZjbUYwYVc5dUtURWRNQnNHQTFVRUF4TVVTSGxrY21GdWRFbEVJRk5UVENCSlEwRWdSekl3SGhjTk1qQXdOekl5TURFeU1UUTFXaGNOTWpJd056SXlNREV6TVRBd1dqQndNUXN3Q1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0F3S1EyRnNhV1p2Y201cFlURVJNQThHQTFVRUJ3d0lVMkZ1SUVwdmMyVXhIREFhQmdOVkJBb01FME5wYzJOdklGTjVjM1JsYlhNc0lFbHVZeTR4R3pBWkJnTlZCQU1NRW1Oc2IzVmtjM052TG1OcGMyTnZMbU52YlRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTGhaMmpDMTVGakdnVzhUWUZrMCtJQVZJSE9IZVJRenZtdWgra2pScTNDUUw5ZzU4Ym16N1BMVU9nUHZiOHZkVmpYNHFQTVFwSTI1UjhaK3ZzMmlpZkhuREZDRHI4SmFqWlV2RjMwR2ptdUM4OHFwSko0VGs5dGdjbjJFUXFOUkJ6bDRoK3E4U2JHSjY0cDYrNFdZTDFhcDZFYzJSeUtrQkVtMkhPSUxLR1pqam14ckJ0WW5xSkc5VmVVYTEwRzlIQjRnSWUrdWlCQ3Y3K3k5eUQyeEViekVtdWx3blVRbjVRNjNndDVuL2dKSWVscWU5QUtxVWh1NVhwemYyK0Y0TC9FMy9WeVkvNjcrZXViUm9pMDJLZHJ3MjZkYkpJZnlRd3kxWHZkV1dXQmJvSGhjczcxSEM1Mk95eTNFZlRBZnZTSXFtVCtXTHlGQ3ZpdzhicjNtZmZjQ0F3RUFBYU9DQTQ4d2dnT0xNQWtHQTFVZEV3UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVW1HcTJMUzYvcDZxZjl2ZldDYS9WaTFmNWlyY3dkQVlJS3dZQkJRVUhBUUVFYURCbU1EZ0dDQ3NHQVFVRkJ6QUNoaXhvZEhSd09pOHZkSEoxYzNRdWNYVnZkbUZrYVhObmJHOWlZV3d1WTI5dEwyaDVaSE56YkdjeUxtTnlkREFxQmdnckJnRUZCUWN3QVlZZWFIUjBjRG92TDI5amMzQXVjWFZ2ZG1Ga2FYTm5iRzlpWVd3dVkyOXRNRndHQTFVZEVRUlZNRk9DRW1Oc2IzVmtjM052TG1OcGMyTnZMbU52YllJVFkyeHZkV1J6YzI4eExtTnBjMk52TG1OdmJZSVRZMnh2ZFdSemMyOHlMbU5wYzJOdkxtTnZiWUlUWTJ4dmRXUnpjMjh6TG1OcGMyTnZMbU52YlRCZUJnTlZIU0FFVnpCVk1BZ0dCbWVCREFFQ0FqQkpCZ3dyQmdFRUFiNVlBQU9IQkFBd09UQTNCZ2dyQmdFRkJRY0NBUllyYUhSMGNEb3ZMM2QzZHk1b2VXUnlZVzUwYVdRdVkyOXRMM04xY0hCdmNuUXZjbVZ3YjNOcGRHOXllVEE3QmdOVkhTVUVOREF5QmdnckJnRUZCUWNEQWdZSUt3WUJCUVVIQXdVR0NDc0dBUVVGQndNR0JnZ3JCZ0VGQlFjREJ3WUlLd1lCQlFVSEF3RXdPd1lEVlIwZkJEUXdNakF3b0M2Z0xJWXFhSFIwY0RvdkwyTnliQzV4ZFc5MllXUnBjMmRzYjJKaGJDNWpiMjB2YUhsa2MzTnNaekl1WTNKc01CMEdBMVVkRGdRV0JCVHFtcTdKSENFdXhhSXBYOVh6SlpNQXFRVERFakFPQmdOVkhROEJBZjhFQkFNQ0JhQXdnZ0YrQmdvckJnRUVBZFo1QWdRQ0JJSUJiZ1NDQVdvQmFBQjJBRllVQnBvdjE4THMwL1hodlVTeVBzZEdkcm04bVJGY3dPK1VtRlhXaWREZEFBQUJjM1FtRnhrQUFBUURBRWN3UlFJaEFQdTBUNUEyTk9XMGVOTGE4dGVLZTJ5c0JXUnl6UGlRNm5FNUhsQ2dsNzRGQWlCZTNwK2NUejEwVmRKWTZFb1FqMEtMa0lFS3E4Ujg4Q2VpUHFUTk9IUWYvd0IyQUZHanNQWDlBWG1jVm0yNE4zaVBES1I2ekJzbnkvZWVpRUthRGY3VWl3WGxBQUFCYzNRbUZ6OEFBQVFEQUVjd1JRSWdWMmpsQk9RY0wyV0c5NVVDVGgxWEJ3VXk4SFVmR2V6Umt0VzgrWEhxNERVQ0lRREdFUlhSWDVna2VGSit1b3NZM1lsTXgzVGk2WWNnSlljQW5WSWlzTEE0eEFCMkFFYWxWZXQxK3BFZ01MV2lpV24wODMwUkxFRjB2djFKdUlXcjh2eHcvbTFIQUFBQmMzUW1GdmNBQUFRREFFY3dSUUlnRGVEbmtHQ2pZVTJnVTdFTVU3bzYzWWt5eUlUa29xRElXbU5Nb3c0c3lUNENJUUNuYm5wcElvbDFsL0V3YWkxbjZDSHpMeTU2RjFWVEtHYkVqZTRKVkZOYVB6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUF0cFZtdDlNN1czQ254RC92OHFXVXpsU0EzTWwzRDhkYTl4eHY2VERmZ1g3d3pLc1E3VDl3Nmt3VFVJOHBMSEptdURUOG5ldHhQd0lpWUNZY21CbWRiRXJ2MUdQZTZoRWU5dTgzVUpzV3JQdnZQeCtMbGtTVjE0Tzhya01rWmNVejh3ejRtQlRGM3NXakFCcjlYUEVqblJMbEMvMnlKTTNZLzhyaUNUamFyRFZWemprTkVyYkZ5MzM1MGlDMmxEZ1NlK2U4R3dhTVJ1Lzl1NS9uN1J0SklpMHFHNVZHbGFvcExYVGZocW5CNk9oZUxyRGFTNUcwbExpdXYwQTh2cVcvRndnbHpLWE1mdm5BS1lSQjBpUzJONDZ5QjNoellQNlkrSkkyVitrWVM1TkdxMGozYnY1RFdlYVJSbllmM2R1akdZWGQyWHZReTlUdzZPalVCTWFrS0k0NFVlRVB6YVpjRzlpWW5NQi9jRlAwSHBrVEtFdGpFaW5pOS9GNVFKaEhEalVodC9uOEY0dFl3ZmpGVk84TmxXM0RQZ0t3Znp5TXB5aTg5R1pyYk5jNVIzTUl1QWRhVHJGSjc2NlRJY1lneVdyL01vUGVXRXZMTldSeFhXSzZuRlJ0ekkxODJDWFpxUlRpNy90WkpIYlFWZlQzcEcwWUxFdDVwck44YVEvNE5FY0VGS2V0NTFTbXpRMFE0dXBlelpRN1l2Z3I0aVk2K3ZZSW10WnVxdWdJMy9hQ3pXanlqQk1OQnZXcnNrZnVpT1lsMzVCbTBkSWxJUFIybVB5VkNYUSszd3RLTi9haGRhNUdNamVXYlFsTlgyakl0cmJDTGZMR1VkSkgyMXFKbmI3K0RuNEdMdkV6cXJRQ1g1V1REQjJldTd1Ylp0bC81Lzd4WlRKRXh6cz08L2RzOlg1MDlDZXJ0aWZpY2F0ZT48L2RzOlg1MDlEYXRhPjwvZHM6S2V5SW5mbz48L2RzOlNpZ25hdHVyZT48c2FtbDpTdWJqZWN0PjxzYW1sOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIj5lc3BfaXRvbV9wbXQuZ2VuPC9zYW1sOk5hbWVJRD48c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciIvPjwvc2FtbDpTdWJqZWN0PjxzYW1sOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDIwLTExLTEwVDAyOjU2OjU3LjQ5OFoiIE5vdE9uT3JBZnRlcj0iMjAyMC0xMS0xMFQwMzozMTo1Ny40OThaIj48c2FtbDpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sOkF1ZGllbmNlPmh0dHBzOi8vY2lzY28uc2VydmljZS1ub3cuY29tPC9zYW1sOkF1ZGllbmNlPjwvc2FtbDpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDpDb25kaXRpb25zPjxzYW1sOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAyMC0xMS0xMFQwMzowMTo1Ny40OThaIiBTZXNzaW9uSW5kZXg9Inlyd0s5ZXVBRWN4bXlSd2NaQWFCN19xRHNYaiI-PHNhbWw6QXV0aG5Db250ZXh0PjxzYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkPC9zYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDpBdXRobkNvbnRleHQ-PC9zYW1sOkF1dGhuU3RhdGVtZW50Pjwvc2FtbDpBc3NlcnRpb24-";
		// Encode data on your side using BASE64
		byte[] bytesEncoded = Base64.encodeBase64(saml_token.getBytes());
		//System.out.println("encoded value is " + new String(bytesEncoded));

		// Decode data on other side, by processing encoded data
		byte[] valueDecoded = Base64.decodeBase64(saml_token.getBytes());
		System.out.println("Decoded value is " + new String(valueDecoded));
	}

}
